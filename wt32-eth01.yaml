# ToDo: 
# * Add support for DS2482S-100, work in progress is here: https://github.com/esphome/feature-requests/issues/621 .
# * Add support for PI4IOE5V96224 IO expander
# * Would be nice: recognize DS18B20 temperature sensors without address in config.

esphome:
  name: wt32_eth01
  friendly_name: wt32_eth01
  includes:
    - uart.h

esp32:
  board: wt32-eth01
  framework:
    type: arduino

# Logging. Set baud_rate to 0 to prevent logging to uart
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  password: ""
  encryption:
    key: "b8N49KwIgYR9nhXerCPHDBu9/QjRtYMGmZKX+cyTg3Q="

ota:
  - platform: esphome
    password: "asdawe213wjkionlhuwbbwe9ijjhklj99"

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO16

#wifi:
#  ssid: "Verburg"
#  password: "1zetor=nx"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "Esp32 Fallback Hotspot"
#    password: "RVzOLClNwDfn"

#captive_portal:
#   

i2c:
  sda: 4
  scl: 2
  scan: true
  id: i2c_bus

pca9685:
  - id: pca9685_hub1
    frequency: 500
    address: 64
  - id: pca9685_hub2
    frequency: 500
    address: 65

binary_sensor:
  - platform: gpio
    pin:
      number: 39
    name: "INPUT_01"
  - platform: gpio
    pin:
      number: 36
    name: "INPUT_02"
  - platform: gpio
    pin:
      number: 35
    name: "INPUT_03"

switch:
  - platform: gpio
    pin: 32
    name: "OUTPUT_01"
  - platform: gpio
    pin: 15
    name: "OUTPUT_02"
  - platform: gpio
    pin: 33
    name: "OUTPUT_03"
  - platform: gpio
    pin:
      number: 12
      inverted: true
    name: "Enable LEDs"

output:
# PWMOUT_02 only works when configured without eth0. Use WiFi instead.
#  - platform: ledc
#    pin: 0
#    id: PWMOUT_02
  - platform: ledc
    pin: 14
    id: PWMOUT_01
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 0
    id: pwm01
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 1
    id: pwm02
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 2
    id: pwm03
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 3
    id: pwm04
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 4
    id: pwm05
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 5
    id: pwm06
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 6
    id: pwm07
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 7
    id: pwm08
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 8
    id: pwm09
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 9
    id: pwm10
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 10
    id: pwm11
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 11
    id: pwm12
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 12
    id: pwm13
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 13
    id: pwm14
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 14
    id: pwm15
  - platform: pca9685
    pca9685_id: 'pca9685_hub1'
    channel: 15
    id: pwm16
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 0
    id: pwm17
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 1
    id: pwm18
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 2
    id: pwm19
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 3
    id: pwm20
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 4
    id: pwm21
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 5
    id: pwm22
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 6
    id: pwm23
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 7
    id: pwm24
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 8
    id: pwm25
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 9
    id: pwm26
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 10
    id: pwm27
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 11
    id: pwm28
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 12
    id: pwm29
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 13
    id: pwm30
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 14
    id: pwm31
  - platform: pca9685
    pca9685_id: 'pca9685_hub2'
    channel: 15
    id: pwm32

light:
# PWMOUT_02 only works when configured without eth0. Use WiFi instead.
#  - platform: monochromatic
#    output: PWMOUT_02
#    name: "PWMOUT_02"
  - platform: monochromatic
    output: PWMOUT_01
    name: "PWMOUT_01"
  - platform: rgbw
    name: "LED 01"
    red: pwm01
    green: pwm02
    blue: pwm03
    white: pwm04
  - platform: rgbw
    name: "LED 02"
    red: pwm05
    green: pwm06
    blue: pwm07
    white: pwm08
  - platform: rgbw
    name: "LED 03"
    red: pwm09
    green: pwm10
    blue: pwm11
    white: pwm12
  - platform: rgbw
    name: "LED 04"
    red: pwm13
    green: pwm14
    blue: pwm15
    white: pwm16
  - platform: rgbw
    name: "LED 05"
    red: pwm17
    green: pwm18
    blue: pwm19
    white: pwm20
  - platform: rgbw
    name: "LED 06"
    red: pwm21
    green: pwm22
    blue: pwm23
    white: pwm24
  - platform: rgbw
    name: "LED 07"
    red: pwm25
    green: pwm26
    blue: pwm27
    white: pwm28
  - platform: rgbw
    name: "LED 08"
    red: pwm29
    green: pwm30
    blue: pwm31
    white: pwm32

uart:
  - id: rs485_uart
    tx_pin: 1
    rx_pin: 3
    baud_rate: 115200
  - id: radio_uart
    tx_pin: 17
    rx_pin: 5
    baud_rate: 2400

text_sensor:
- platform: custom
  lambda: |-
    auto my_custom_sensor1 = new UartReadLineSensor(id(rs485_uart));
    App.register_component(my_custom_sensor1);
    return {my_custom_sensor1};
  text_sensors:
    id: "RS485_readline"
    name: "RS485 Sensor"
- platform: custom
  lambda: |-
    auto my_custom_sensor2 = new UartReadLineSensor(id(radio_uart));
    App.register_component(my_custom_sensor2);
    return {my_custom_sensor2};
  text_sensors:
    id: "Radio_readline"
    name: "Radio Sensor"

button:
  - platform: template
    name: "rs485_uart_send"
    on_press:
      uart.write: 
        id: rs485_uart
        data: "Hello World from RS485!\r\n"
  - platform: template
    name: "radio_uart_send"
    on_press:
      uart.write: 
        id: radio_uart
        data: "Hello World from radio!\r\n"
